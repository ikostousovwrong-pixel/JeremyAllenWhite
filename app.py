import os
import random
import sqlite3
import asyncio
import logging
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from openai import OpenAI

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
load_dotenv()
TG_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_NAME = os.getenv("BOT_NAME", "default")

if not TG_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ .env")
if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ .env")

client = OpenAI(api_key=OPENAI_API_KEY)

CHANNEL_USERNAME = "@fanbotpage"

# === TERMS OF SERVICE ===
TOS_VERSION = 1
TERMS_URL = "https://telegra.ph/YOUR_TERMS"
PRIVACY_URL = "https://telegra.ph/YOUR_PRIVACY"

# === SQLite –±–∞–∑–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏–π ===
conn = sqlite3.connect("consent.db", check_same_thread=False)
conn.execute(
    """
    CREATE TABLE IF NOT EXISTS tos_acceptance (
        user_id       INTEGER PRIMARY KEY,
        accepted_at   TEXT    NOT NULL,
        version       INTEGER NOT NULL,
        age_confirmed INTEGER NOT NULL
    )
    """
)
conn.commit()

def has_accepted(user_id: int) -> bool:
    row = conn.execute(
        "SELECT version FROM tos_acceptance WHERE user_id = ?",
        (user_id,),
    ).fetchone()
    return bool(row and int(row[0]) == int(TOS_VERSION))

def set_accepted(user_id: int) -> None:
    conn.execute(
        """
        INSERT INTO tos_acceptance (user_id, accepted_at, version, age_confirmed)
        VALUES (?, ?, ?, 1)
        ON CONFLICT(user_id) DO UPDATE SET
            accepted_at = excluded.accepted_at,
            version = excluded.version,
            age_confirmed = excluded.age_confirmed
        """,
        (user_id, datetime.utcnow().isoformat(), int(TOS_VERSION)),
    )
    conn.commit()

def delete_acceptance(user_id: int) -> None:
    conn.execute("DELETE FROM tos_acceptance WHERE user_id = ?", (user_id,))
    conn.commit()

# === Helpers ===
async def is_subscribed(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

def consent_text() -> str:
    return (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã "
        "—Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        f"–ò –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}"
    )

def consent_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="consent_accept")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—è—é", callback_data="consent_decline")],
            [
                InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è", url=TERMS_URL),
                InlineKeyboardButton("üîí –ü–æ–ª–∏—Ç–∏–∫–∞", url=PRIVACY_URL),
            ],
        ]
    )

async def send_consent_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(consent_text(), reply_markup=consent_kb())

# === –ó–ê–ì–†–£–ó–ö–ê PROMPT ===
def load_system_prompt() -> str:
    file_path = f"prompts/{BOT_NAME}.txt"
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read().strip()
    return f"–¢—ã ‚Äî –ø–∞—Ä–æ–¥–∏–π–Ω—ã–π —Ñ–∞–Ω-–±–æ—Ç {BOT_NAME}. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."

SYSTEM_PROMPT = load_system_prompt()

# === CHAT ===
MAX_TURNS = 8  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
LONG_PROB = 0.5

def build_messages(history: list[dict], user_text: str, mode: str) -> list[dict]:
    if mode == "short":
        length_rule = "–û—Ç–≤–µ—á–∞–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ (3-5 —Å–ª–æ–≤)."
    else:
        length_rule = "–î–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ–∫–æ–ª–æ 180‚Äì220 —Ç–æ–∫–µ–Ω–æ–≤."
    sys_prompt = SYSTEM_PROMPT + "\n–ü—Ä–∞–≤–∏–ª–æ –¥–ª–∏–Ω—ã: " + length_rule + " –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ."
    
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_TURNS*2 —Å–æ–æ–±—â–µ–Ω–∏–π
    recent_history = history[-MAX_TURNS*2:] if history else []
    
    msgs: list[dict] = [{"role": "system", "content": sys_prompt}]
    msgs += recent_history
    msgs.append({"role": "user", "content": user_text})
    return msgs

def llm_reply(messages: list[dict], mode: str) -> str:
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.8 if mode == "long" else 0.5,
        max_tokens=220 if mode == "long" else 35,
        messages=messages,
    )
    return resp.choices[0].message.content.strip()

# === HANDLERS ===
async def on_consent_accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    user_id = q.from_user.id
    set_accepted(user_id)
    await q.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
    await q.edit_message_text("–°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /start.")

async def on_consent_decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    delete_acceptance(q.from_user.id)
    await q.answer()
    await q.edit_message_text("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—Å–ª–æ–≤–∏–π. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not await is_subscribed(context.bot, user_id):
        await update.message.reply_text(
            f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑."
        )
        return

    if not has_accepted(user_id):
        await send_consent_message(update, context)
        return

    context.user_data.setdefault("history", [])
    text = (
        f"–•–µ–π! –≠—Ç–æ –ø–∞—Ä–æ–¥–∏–π–Ω—ã–π —Ñ–∞–Ω–±–æ—Ç. \n"
        "–ò—Å—Ç–æ—Ä–∏–∏, —Å–æ–≤–µ—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –¥—É—à–∞–º ‚Äî –≤—ã–±–∏—Ä–∞–π —Å–∞–º.\n"
        "(–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —ç—Ç–æ –ø–∞—Ä–æ–¥–∏—è, –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫.)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help, /reset"
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–§—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:\n"
        "‚Äî –∫–∞–∫ –¥–µ–ª–∞?\n"
        "‚Äî –ø—Ä–∏–¥—É–º–∞–π —Å–≤–∏–¥–∞–Ω–∏–µ\n"
        "‚Äî —Å–¥–µ–ª–∞–π –º–Ω–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç\n"
        "‚Äî —Å–æ–≤–µ—Ç –ø–æ —Å—Ç–∏–ª—é\n"
        "‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –¥–µ–ª–∞\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞."
    )
    await update.message.reply_text(msg)

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["history"] = []
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?")

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not await is_subscribed(context.bot, user_id):
        await update.message.reply_text(
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {CHANNEL_USERNAME}"
        )
        return

    if not has_accepted(user_id):
        await send_consent_message(update, context)
        return

    text = (update.message.text or "").strip()
    if not text:
        return

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
    history: list[dict] = context.user_data.setdefault("history", [])

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.TYPING,
    )

    # –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞
    text_l = text.lower()
    force_long = any(k in text_l for k in ("#long", "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–ª–∏–Ω–Ω–æ", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ"))
    force_short = any(k in text_l for k in ("#short", "–∫—Ä–∞—Ç–∫–æ", "–∫–æ—Ä–æ—á–µ", "–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º"))
    if force_long:
        mode = "long"
    elif force_short:
        mode = "short"
    else:
        mode = "long" if random.random() < LONG_PROB else "short"

    try:
        messages = build_messages(history, text, mode)
        reply = await asyncio.to_thread(llm_reply, messages, mode)
    except Exception as e:
        logging.error("LLM error: %s", repr(e))
        await update.message.reply_text("–ó–∞–Ω—è—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ–∑–∂–µ.")
        return

      await update.message.reply_text(reply)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    history.append({"role": "user", "content": text})
    history.append({"role": "assistant", "content": reply})
    context.user_data["history"] = history[-MAX_TURNS*2:]

    # === MAIN ===
def main() -> None:
    app = Application.builder().token(TG_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))

    app.add_handler(CallbackQueryHandler(on_consent_accept, pattern=r"^consent_accept$"))
    app.add_handler(CallbackQueryHandler(on_consent_decline, pattern=r"^consent_decline$"))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, talk))

    port = int(os.getenv("PORT", "8080"))
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ {BOT_NAME} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run_polling()

if name == "__main__":
    main()
        
